GET_USER_INFO=SELECT DISTINCT u.userId, u.userName, u.emailId, COALESCE(u.firstname,' ') firstName, u.middleName, COALESCE(u.lastname,' ') lastName, \
		u.parentBuName AS buName, u.location, u.country, u.loginId, u.supervisorId, u.birthDate, u.joiningDate, u.profilePicUrl AS profileImage, \
		u.payroll, BigToDouble(ROUND(u.previousExp,2)) AS previousExp, u.city, u.vbu, \
		u.skills AS technicalSkill, u.awards AS awardsRecognitions,u.training AS trainingAttended, \
		BigToDouble(ROUND((DATEDIFF(CURDATE(),u.joiningDate))/365,2)) AS zensarExp, \
		p.1upManagerName AS fupManagerName, p.1upManagerId AS fupManagerId, p.projectName, p.customerName, BigToInt(DATEDIFF(CURRENT_DATE, p.startDate)) AS duration, \
		BigToInt((SELECT COUNT(questionId) FROM QuestionEntry WHERE userId = u.userId AND activeStatus = :activeStatus AND (questionStatus =:questionStatus OR reopenCount > 0))) questionsCount, \
		BigToInt((SELECT COUNT(result) FROM( \
			SELECT (CASE WHEN r.score = :likeScore THEN score ELSE NULL END) AS result FROM Rating r \
			INNER JOIN BroadcastEntry be ON r.conversationId = be.broadcastId AND (r.conversationTypeId = :broadcast OR r.conversationTypeId = :gcmBroadcast) \
			AND be.activeStatus = :activeStatus \
			WHERE r.userId = :userProfileId AND r.activeStatus = :activeStatus \
			UNION ALL \
			SELECT (CASE WHEN r.score = :likeScore THEN score ELSE NULL END) AS result FROM Rating r \
			INNER JOIN QuestionEntry qe ON r.conversationId = qe.questionId AND r.conversationTypeId = :question AND qe.activeStatus = :activeStatus \
			WHERE r.userId = :userProfileId AND r.activeStatus = :activeStatus \
			UNION ALL \
			SELECT (CASE WHEN r.score = :likeScore THEN score ELSE NULL END) AS result FROM Rating r \
			INNER JOIN (SELECT replyId FROM ReplyEntry re \
				INNER JOIN QuestionEntry qe ON qe.questionId = re.questionId AND re.activeStatus = :activeStatus AND qe.activeStatus = :activeStatus)activeList \
				ON r.conversationId = activeList.replyId AND r.conversationTypeId = :answer \
			WHERE r.userId = :userProfileId AND r.activeStatus = :activeStatus \
			)resultSet)) likesCount, \
		BigToInt((SELECT COUNT(result) FROM( \
			SELECT (CASE WHEN r.score = :commentScore THEN score ELSE NULL END) AS result FROM Rating r \
			INNER JOIN BroadcastEntry be ON r.conversationId = be.broadcastId AND (r.conversationTypeId = :broadcast OR r.conversationTypeId = :gcmBroadcast) \
				AND be.activeStatus = :activeStatus \
			WHERE r.userId = :userProfileId AND r.activeStatus = :activeStatus \
			UNION ALL \
			SELECT (CASE WHEN r.score = :commentScore THEN score ELSE NULL END) AS result FROM Rating r \
			INNER JOIN (SELECT replyId FROM ReplyEntry re  \
				INNER JOIN QuestionEntry qe ON qe.questionId = re.questionId AND re.activeStatus = :activeStatus AND qe.activeStatus = :activeStatus)activeList \
				ON r.conversationId = activeList.replyId AND r.conversationTypeId = :answer \
			WHERE r.userId = :userProfileId AND r.activeStatus = :activeStatus \
			)resultSet)) commentsCount, \
		osm.groupName \
		FROM UserInfo u \
		LEFT JOIN UserProjectInfo p ON u.userId = p.userId \
		LEFT JOIN OrgStructureMaster osm ON osm.parentBuName = u.parentBuName \
		WHERE u.activeStatus=:activeStatus AND u.userId = :userProfileId \
		GROUP BY u.parentBuName, p.customerName, u.userId
